// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Currency {
  EUR
  USD
  GBP
}

enum SizeUnit {
  SQM
  SQFT
}

enum CostInterval {
  ONE_TIME
  MONTHLY
  QUARTERLY
  YEARLY
}

enum CostType {
  SERVICE_CHARGE
  BASE_RENT
  OTHER
}

enum PaymentType {
  REGULAR_RENT
  ADDITIONAL_PAYMENT
  SERVICE_CHARGE
  OTHER
}

enum ApartmentType {
  HOUSE
  APARTMENT
  STUDIO
  LOFT
  DUPLEX
  PENTHOUSE
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String
  buildings Building[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Building {
  id         String      @id @default(uuid())
  name       String
  address    String
  apartments Apartment[]
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  costs      Cost[]
  floors     Int
  meters     Meter[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Apartment {
  id         String        @id @default(uuid())
  name       String
  size       Float
  sizeUnit   SizeUnit
  buildingId String
  building   Building      @relation(fields: [buildingId], references: [id])
  meters     Meter[]
  payments   Payment[]
  costs      Cost[]
  floor      Int
  leases     Lease[]
  type       ApartmentType
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Meter {
  id          String     @id @default(uuid())
  type        String // e.g., "Water", "Electricity", "Gas"
  value       Float?
  unit        String // e.g., "kWh", "m3"
  costPerUnit Float
  apartmentId String?
  apartment   Apartment? @relation(fields: [apartmentId], references: [id])
  buildingId  String?
  building    Building?  @relation(fields: [buildingId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Cost {
  id          String       @id @default(uuid())
  name        String
  amount      Float
  currency    Currency
  type        CostType
  interval    CostInterval
  biller      String
  occurredAt  DateTime
  buildingId  String?
  building    Building?    @relation(fields: [buildingId], references: [id])
  apartmentId String?
  apartment   Apartment?   @relation(fields: [apartmentId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Payment {
  id          String      @id @default(uuid())
  amount      Float
  currency    Currency
  dueDate     DateTime
  status      String // "pending" | "paid" | "overdue"
  type        PaymentType
  apartmentId String
  apartment   Apartment   @relation(fields: [apartmentId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Tenant {
  id          String   @id @default(uuid())
  firstName   String
  name        String
  email       String   @unique
  phoneNumber String
  leases      Lease[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lease {
  id          String    @id @default(uuid())
  startDate   DateTime
  endDate     DateTime?
  rentAmount  Float
  currency    Currency
  apartmentId String
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
